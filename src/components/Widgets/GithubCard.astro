<script>
let githubCardsObserver: IntersectionObserver | null = null

async function loadCardData(card: HTMLElement) {
  const repo = card.dataset.repo
  if (!repo) {
    return
  }

  const el = {
    avatar: card.querySelector('.gc-owner-avatar') as HTMLElement,
    desc: card.querySelector('.gc-repo-description') as HTMLElement,
    stars: card.querySelector('.gc-stars-count') as HTMLElement,
    forks: card.querySelector('.gc-forks-count') as HTMLElement,
    license: card.querySelector('.gc-license-info') as HTMLElement,
  } as const

  try {
    const response = await fetch(`https://api.github.com/repos/${repo}`)

    if (!response.ok) {
      if (el.desc) {
        el.desc.textContent = 'Loading failed.'
      }
      return
    }

    const data = await response.json()
    const numberFormat = new Intl.NumberFormat('en', { notation: 'compact', maximumFractionDigits: 1 })

    if (el.avatar && data.owner?.avatar_url) {
      el.avatar.style.backgroundImage = `url(${data.owner.avatar_url})`
    }

    if (el.desc) {
      el.desc.textContent = data.description ?? 'No description'
    }

    if (el.stars) {
      el.stars.textContent = numberFormat.format(data.stargazers_count ?? 0)
    }

    if (el.forks) {
      el.forks.textContent = numberFormat.format(data.forks_count ?? 0)
    }

    if (el.license) {
      el.license.textContent = data.license?.spdx_id ?? 'No License'
    }
  }
  catch (error) {
    console.error(`Failed to fetch ${repo}:`, error)
  }
}

function lazySetupGithubCards() {
  // Cleanup observer if exists
  githubCardsObserver?.disconnect()

  const githubCards = document.getElementsByClassName('gc-container')
  if (githubCards.length === 0) {
    return
  }

  // Create an intersection observer to lazy load GitHub repo data when cards enter viewport
  githubCardsObserver = new IntersectionObserver((entries) => {
    entries.forEach((entry) => {
      if (entry.isIntersecting) {
        loadCardData(entry.target as HTMLElement)
        githubCardsObserver?.unobserve(entry.target)
      }
    })
  }, { rootMargin: '200px' })

  Array.from(githubCards).forEach(card => githubCardsObserver?.observe(card))
}

lazySetupGithubCards()
document.addEventListener('astro:page-load', lazySetupGithubCards)
</script>
